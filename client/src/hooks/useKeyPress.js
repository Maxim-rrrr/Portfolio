import { useState, useEffect } from "react";

/**
 * https://usehooks.com/useKeyPress
 * 
 * –≠—Ç–æ—Ç —Ö—É–∫ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ª–µ–≥–∫–æ –æ–±–Ω–∞—Ä—É–∂–∏—Ç—å, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç 
 * –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏—à—É –Ω–∞ —Å–≤–æ–µ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ. –†–µ—Ü–µ–ø—Ç –¥–æ–≤–æ–ª—å–Ω–æ –ø—Ä–æ—Å—Ç, 
 * —Ç–∞–∫ –∫–∞–∫ —è —Ö–æ—á—É –ø–æ–∫–∞–∑–∞—Ç—å, –∫–∞–∫ –º–∞–ª–æ –∫–æ–¥–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è, –Ω–æ —è –ø—Ä–∏–∑—ã–≤–∞—é 
 * –≤—Å–µ—Ö —á–∏—Ç–∞—Ç–µ–ª–µ–π —Å–æ–∑–¥–∞—Ç—å –±–æ–ª–µ–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—É—é –≤–µ—Ä—Å–∏—é —ç—Ç–æ–π –ª–æ–≤—É—à–∫–∏. 
 * –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–ª–∞–≤–∏—à –±—ã–ª–æ –±—ã 
 * —Ö–æ—Ä–æ—à–∏–º –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ–º. –ë–æ–Ω—É—Å–Ω—ã–µ –±–∞–ª–ª—ã: —Ç–∞–∫–∂–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ, —á—Ç–æ–±—ã 
 * –æ–Ω–∏ —É–¥–µ—Ä–∂–∏–≤–∞–ª–∏—Å—å –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ. –ù–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –¥–µ–ª–∏—Ç—å—Å—è –≤—Å–µ–º, 
 * —á—Ç–æ –≤—ã —Å–æ–∑–¥–∞–ª–∏ –ø–æ —Å—É—Ç–∏ —ç—Ç–æ–≥–æ —Ä–µ—Ü–µ–ø—Ç–∞ .
 */


// // Usage
// function App() {
//   // Call our hook for each key that we'd like to monitor
//   const happyPress = useKeyPress("h");
//   const sadPress = useKeyPress("s");
//   const robotPress = useKeyPress("r");
//   const foxPress = useKeyPress("f");
//   return (
//     <div>
//       <div>h, s, r, f</div>
//       <div>
//         {happyPress && "üòä"}
//         {sadPress && "üò¢"}
//         {robotPress && "ü§ñ"}
//         {foxPress && "ü¶ä"}
//       </div>
//     </div>
//   );
// }

// Hook
function useKeyPress(targetKey) {
  // State for keeping track of whether key is pressed
  const [keyPressed, setKeyPressed] = useState<boolean>(false);
  // If pressed key is our target key then set to true
  function downHandler({ key }) {
    if (key === targetKey) {
      setKeyPressed(true);
    }
  }
  // If released key is our target key then set to false
  const upHandler = ({ key }) => {
    if (key === targetKey) {
      setKeyPressed(false);
    }
  };
  // Add event listeners
  useEffect(() => {
    window.addEventListener("keydown", downHandler);
    window.addEventListener("keyup", upHandler);
    // Remove event listeners on cleanup
    return () => {
      window.removeEventListener("keydown", downHandler);
      window.removeEventListener("keyup", upHandler);
    };
  }, []); // Empty array ensures that effect is only run on mount and unmount
  return keyPressed;
}

export default useKeyPress