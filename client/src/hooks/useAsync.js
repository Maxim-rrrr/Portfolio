import React, { useState, useEffect, useCallback } from "react";

/**
 * https://usehooks.com/useAsync/
 * 
 * –û–±—ã—á–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å—Ç–∞—Ç—É—Å –ª—é–±–æ–≥–æ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. 
 * –ü—Ä–∏–º–µ—Ä–æ–º –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–±–æ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ API –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–µ–¥ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. 
 * –î—Ä—É–≥–∏–º –ø—Ä–∏–º–µ—Ä–æ–º –º–æ–∂–µ—Ç –±—ã—Ç—å —Ñ–æ—Ä–º–∞, –≤ –∫–æ—Ç–æ—Ä–æ–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫–ª—é—á–∏—Ç—å –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏, 
 * –∫–æ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏, –∞ –∑–∞—Ç–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º 
 * –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏–ª–∏ –æ–± –æ—à–∏–±–∫–µ –ø–æ—Å–ª–µ –µ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.
 * 
 * –í–º–µ—Å—Ç–æ —Ç–æ–≥–æ , —á—Ç–æ–±—ã –º—É—Å–æ—Ä –≤–∞—à–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å –∫—É—á–µ–π useState –∑–≤–æ–Ω–∫–æ–≤ , 
 * —á—Ç–æ–±—ã —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π, –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∫—Ä—é–∫ , 
 * –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –≤ –∫–∞—á–µ—Å—Ç–≤–µ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç value, error–∏ status —Ü–µ–Ω–Ω–æ—Å—Ç—å , 
 * –∫–æ—Ç–æ—Ä—ã–µ –º—ã –¥–æ–ª–∂–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –Ω–∞—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å. 
 * –í–æ–∑–º–æ–∂–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è status prop: "idle", "pending", "success", "error". 
 * –ö–∞–∫ –≤—ã —É–≤–∏–¥–∏—Ç–µ –≤ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω–æ–º –Ω–∏–∂–µ –∫–æ–¥–µ, –Ω–∞—à —Ö—É–∫ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∫–∞–∫ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, 
 * —Ç–∞–∫ –∏ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–π execute —Ñ—É–Ω–∫—Ü–∏–∏.
 */


// // Usage
// function App() {
//   const { execute, status, value, error } = useAsync(myFunction, false);
//   return (
//     <div>
//       {status === "idle" && <div>Start your journey by clicking a button</div>}
//       {status === "success" && <div>{value}</div>}
//       {status === "error" && <div>{error}</div>}
//       <button onClick={execute} disabled={status === "pending"}>
//         {status !== "pending" ? "Click me" : "Loading..."}
//       </button>
//     </div>
//   );
// }
// // An async function for testing our hook.
// // Will be successful 50% of the time.
// const myFunction = () => {
//   return new Promise((resolve, reject) => {
//     setTimeout(() => {
//       const rnd = Math.random() * 10;
//       rnd <= 5
//         ? resolve("Submitted successfully üôå")
//         : reject("Oh no there was an error üòû");
//     }, 2000);
//   });
// };


// Hook
const useAsync = (asyncFunction, immediate = true) => {
  const [status, setStatus] = useState("idle");
  const [value, setValue] = useState(null);
  const [error, setError] = useState(null);

  // The execute function wraps asyncFunction and
  // handles setting state for pending, value, and error.
  // useCallback ensures the below useEffect is not called
  // on every render, but only if asyncFunction changes.
  const execute = useCallback(() => {
    setStatus("pending");
    setValue(null);
    setError(null);
    return asyncFunction()
      .then((response) => {
        setValue(response);
        setStatus("success");
      })
      .catch((error) => {
        setError(error);
        setStatus("error");
      });
  }, [asyncFunction]);

  // Call execute if we want to fire it right away.
  // Otherwise execute can be called later, such as
  // in an onClick handler.
  useEffect(() => {
    if (immediate) {
      execute();
    }
  }, [execute, immediate]);

  return { execute, status, value, error };
};

export default useAsync